#include <System.h>
#include <Converter.h>
#include <ros/ros.h>
#include <pcl_ros/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl_conversions/pcl_conversions.h>

typedef pcl::PointCloud<pcl::PointXYZ> PointCloud;

int main(int argc, char **argv) {
  ros::init(argc, argv, "testFrameGetter");
  ros::NodeHandle node;

  ros::Publisher pub = node.advertise<PointCloud> ("points2",1);
  PointCloud::Ptr msg (new PointCloud);
  msg->header.frame_id = "KeyFrame";
  // argv[1]: vocabulary file path, argv[2]: parameter yaml file path
  ORB_SLAM2::System SLAM(argv[1], argv[2], ORB_SLAM2::System::MONOCULAR, true);
  //do processes
  //output map points
  std::vector<ORB_SLAM2::MapPOInt*>allMapPoints = SLAM.GetMap()->GetAllMapPoints();
  std::cout << "# size =" << allMapPoints.size() << std::endl;
  std::cout << "# x,y,z" << std::endl;
  for (auto p : allMapPoints) {
    Eigen::Matrix<double, 3, 1> v = ORB_SLAM2::Converter::toVector3d(p->GetWorldPos());
    std::cout << v.x() << "," << v.y() << "," << v.z() << std::endl;
    msg->points.push_back(pcl::PointXYZ(v.x(),v.y(),v.z()));
  }
  ros::Rate loop_rate(4);
  while (node.ok()) {
    pcl_conversions::toPCL(ros::Time::now(), msg->header.stamp);
    pub.publish(msg);
    rosLLspinOnce();
    loop_rate.sleep();
  }

}
